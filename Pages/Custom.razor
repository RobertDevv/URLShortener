@page "/{URLParameter}"
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager navManager;
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor;

<PageTitle>Redirecting..</PageTitle>

<style>
    body {
        background-color: #000000;
    }
</style>

@code {
    [Parameter]
    public string URLParameter { get; set; }

    protected override void OnInitialized()
    {
        using (var context = new Data.DatabaseContext())
        {
            // Redirection
            var redirect = context.Redirects.FirstOrDefault(e => e.Name.ToLower() == URLParameter.ToLower());

            if (redirect != null)
            {
                redirect.Visits++;

                // Referrals (to only be done if redirect is true)
                if (QueryHelpers.ParseQuery(navManager.ToAbsoluteUri(navManager.Uri).Query).TryGetValue("ref", out var referrer)) // example.com/redirect?ref=referrer
                {
                    if (referrer.ToString() != "") // No blanks for ?ref=
                    {
                        var referral = context.Referrals.FirstOrDefault(e => e.Name.ToLower() == referrer.ToString());

                        if (referral != null)
                        {
                            referral.Visits++;
                        }
                        else
                        {
                            context.Referrals.Add(new Data.Models.Referrals { Name = referrer.ToString().ToLower(), Visits = 1 }); // If it doesn't exist, add it
                        }
                    }
                }

                httpContextAccessor.HttpContext.Response.Redirect(redirect.Url);
            }
            else
            {
                httpContextAccessor.HttpContext.Response.Redirect(navManager.BaseUri + "?error=notfound");  // If it doesn't exist, return to the homepage
            }

            context.SaveChanges();
        }
    }
}